
import java.util.*;
import java.io.*;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class TextProcessing extends javax.swing.JFrame {

    /**
     * Creates new form TextProcessing
     */
    public TextProcessing() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Nyala", 0, 13)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Positive");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("View Pos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton3.setText("Negative ");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        read();
        all.addAll(set);
        sheet = workbook.createSheet();
        try {
            matrix = new FileOutputStream("C:\\Users\\pc\\Desktop\\manuscript\\postive" + ".xlsx");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        for (int i = 0; i < count; i++) {
            row = sheet.createRow(i);
            for (int j = 0; j < all.size(); j++) {
                cell = row.createCell(j);
                token = all.get(j);
                if (positive[i].contains(token)) {
                    df_value = doc_freq(token);
                    tf = Collections.frequency(positive[i], token);
                    tf = (double) tf / (positive[i].size());
                    idf = (double) count / df;
                    idf = (double) Math.log(idf);
                    tf_idf = (double) tf * idf;
                    if (tf_idf < 0) {
                        tf_idf = tf_idf * -1;
                    }
                    cell.setCellValue(tf_idf);
                } else {
                    cell.setCellValue(0);
                }

            }
        }

        try {
            workbook.write(matrix);
            System.out.println("sucess");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        read();

        jTextArea1.append(all.toString());
        System.out.println(all.size());

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        read();
        all.addAll(set);
        sheet = workbook.createSheet();
        try {
            matrix = new FileOutputStream("C:\\Users\\pc\\Desktop\\manuscript\\negative" + ".xlsx");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        for (int i = 0; i < count1; i++) {
            row = sheet.createRow(i);
            for (int j = 0; j < all.size(); j++) {
                cell = row.createCell(j);
                token = all.get(j);
                if (negative[i].contains(token)) {
                    df_value = doc_freq(token);
                    tf = Collections.frequency(negative[i], token);
                    tf = (double) tf / (negative[i].size());
                    idf = (double) count1 / df;
                    idf = (double) Math.log(idf);
                    tf_idf = (double) tf * idf;
                    if (tf_idf < 0) {
                        tf_idf = tf_idf * -1;
                    }
                    cell.setCellValue(tf_idf);
                } else {
                    cell.setCellValue(0);
                }

            }
        }

        try {
            workbook.write(matrix);
            System.out.println("sucess");
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    void check() {
        System.out.println(count1);
        for (int i = 0; i < count1; i++) {
            jTextArea1.append(negative[i].toString() + "\n");
        }
    }

    //reading negative and positive comments
    void read() {
        // negative comments
        try {
            fin = new FileInputStream(neg);
            scan = new Scanner(fin);
            while (scan.hasNext()) {
                temp = scan.nextLine();
                String[] str = temp.split("\\s+");
                negative[count1] = new ArrayList<>();
                for (String string : str) {
                    negative[count1].add(string);
                    set.add(string);
                }
                allnegative.addAll(negative[count1]);
                count1++;
            }

            System.out.println(count1);

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        //positive comments
        try {
            fin = new FileInputStream(pos);
            scan = new Scanner(fin);
            while (scan.hasNext()) {
                temp = scan.nextLine();
                String[] str = temp.split("\\s+");
                positive[count] = new ArrayList<>();
                for (String string : str) {
                    positive[count].add(string);
                    set.add(string);
                }
                allpostive.addAll(positive[count]);
                count++;
            }

            System.out.println(count);

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }

    int doc_freq(String token) {
        for (int i = 0; i < count; i++) {
            if (positive[i].contains(token)) {
                df++;
            }
        }
        for (int i = 0; i < count1; i++) {
            if (negative[i].contains(token)) {
                df++;
            }
        }
        return df;
    }
    File pos = new File("C:\\Users\\pc\\Documents\\positive.txt");
    File neg = new File("C:\\Users\\pc\\Documents\\negative.txt");
    FileInputStream fin;
    Scanner scan;
    int count = 0, count1 = 0, df, df_value;
    double idf, tf_idf, tf;
    String temp, token;
    XSSFWorkbook workbook = new XSSFWorkbook();
    Row row;
    Cell cell;
    XSSFSheet sheet;
    FileOutputStream matrix;
    ArrayList<String> allpostive = new ArrayList<>();
    ArrayList<String> allnegative = new ArrayList<>();
    ArrayList<String> all = new ArrayList<>();
    Set<String> set = new HashSet<>();
    ArrayList<String>[] positive = (ArrayList<String>[]) new ArrayList[300];
    ArrayList<String>[] negative = (ArrayList<String>[]) new ArrayList[300];

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextProcessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextProcessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextProcessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextProcessing.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextProcessing().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
